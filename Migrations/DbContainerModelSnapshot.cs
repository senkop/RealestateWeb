// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Try.DAL.Database;

namespace Try.Migrations
{
    [DbContext(typeof(DbContainer))]
    partial class DbContainerModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.14")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Try.DAL.Entity.Ads", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Usersid")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Usersid");

                    b.ToTable("Ads");
                });

            modelBuilder.Entity("Try.DAL.Entity.Client_interesets", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Clientsid")
                        .HasColumnType("int");

                    b.Property<int>("Interestsid")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Clientsid");

                    b.HasIndex("Interestsid");

                    b.ToTable("client_interesets");
                });

            modelBuilder.Entity("Try.DAL.Entity.Client_orders", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Clientsid")
                        .HasColumnType("int");

                    b.Property<int>("Ordersid")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Clientsid");

                    b.HasIndex("Ordersid");

                    b.ToTable("client_order");
                });

            modelBuilder.Entity("Try.DAL.Entity.Clients", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fname")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Lname")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("Signupdate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("Try.DAL.Entity.Estate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EstateId")
                        .HasColumnType("int");

                    b.Property<string>("Filter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("Propertiesid")
                        .HasColumnType("int");

                    b.Property<int>("St_num")
                        .HasColumnType("int");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Usersid")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EstateId");

                    b.HasIndex("Propertiesid");

                    b.HasIndex("Usersid");

                    b.ToTable("Estate");
                });

            modelBuilder.Entity("Try.DAL.Entity.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Clientsid")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<string>("Problem")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Solution")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Clientsid");

                    b.ToTable("Feedback");
                });

            modelBuilder.Entity("Try.DAL.Entity.Interests", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Interests");
                });

            modelBuilder.Entity("Try.DAL.Entity.Order_Estate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Estateid")
                        .HasColumnType("int");

                    b.Property<int>("Orderid")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Estateid");

                    b.HasIndex("Orderid");

                    b.ToTable("Order_Estate");
                });

            modelBuilder.Entity("Try.DAL.Entity.Orders", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Try.DAL.Entity.Properties", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Images")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Num_bathrooms")
                        .HasColumnType("int");

                    b.Property<int>("Num_rooms")
                        .HasColumnType("int");

                    b.Property<string>("Size")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Properties");
                });

            modelBuilder.Entity("Try.DAL.Entity.UserGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Usergroup");
                });

            modelBuilder.Entity("Try.DAL.Entity.Users", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fname")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Lname")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("Signupdate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Usergroupid")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Usergroupid");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Try.Models.EstatesVM", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Filter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("Propertiesid")
                        .HasColumnType("int");

                    b.Property<int>("St_num")
                        .HasColumnType("int");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Usersid")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Propertiesid");

                    b.HasIndex("Usersid");

                    b.ToTable("EstatesVM");
                });

            modelBuilder.Entity("Try.DAL.Entity.Ads", b =>
                {
                    b.HasOne("Try.DAL.Entity.Users", "Users")
                        .WithMany()
                        .HasForeignKey("Usersid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Try.DAL.Entity.Client_interesets", b =>
                {
                    b.HasOne("Try.DAL.Entity.Clients", "Clients")
                        .WithMany("Client_Interesets")
                        .HasForeignKey("Clientsid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Try.DAL.Entity.Interests", "Interests")
                        .WithMany("Client_Interesets")
                        .HasForeignKey("Interestsid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Clients");

                    b.Navigation("Interests");
                });

            modelBuilder.Entity("Try.DAL.Entity.Client_orders", b =>
                {
                    b.HasOne("Try.DAL.Entity.Clients", "Clients")
                        .WithMany("Client_Orders")
                        .HasForeignKey("Clientsid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Try.DAL.Entity.Orders", "Orders")
                        .WithMany("Client_Orders")
                        .HasForeignKey("Ordersid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Clients");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Try.DAL.Entity.Estate", b =>
                {
                    b.HasOne("Try.DAL.Entity.Estate", null)
                        .WithMany("Order_estate")
                        .HasForeignKey("EstateId");

                    b.HasOne("Try.DAL.Entity.Properties", "Properties")
                        .WithMany("Estate")
                        .HasForeignKey("Propertiesid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Try.DAL.Entity.Users", "Users")
                        .WithMany("Estate")
                        .HasForeignKey("Usersid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Properties");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Try.DAL.Entity.Feedback", b =>
                {
                    b.HasOne("Try.DAL.Entity.Clients", "Clients")
                        .WithMany("Feedback")
                        .HasForeignKey("Clientsid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Clients");
                });

            modelBuilder.Entity("Try.DAL.Entity.Order_Estate", b =>
                {
                    b.HasOne("Try.DAL.Entity.Estate", "Estate")
                        .WithMany()
                        .HasForeignKey("Estateid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Try.DAL.Entity.Orders", "Orders")
                        .WithMany("Order_estate")
                        .HasForeignKey("Orderid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Estate");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Try.DAL.Entity.Users", b =>
                {
                    b.HasOne("Try.DAL.Entity.UserGroup", "Usergroup")
                        .WithMany("Users")
                        .HasForeignKey("Usergroupid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usergroup");
                });

            modelBuilder.Entity("Try.Models.EstatesVM", b =>
                {
                    b.HasOne("Try.DAL.Entity.Properties", "Properties")
                        .WithMany()
                        .HasForeignKey("Propertiesid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Try.DAL.Entity.Users", "Users")
                        .WithMany()
                        .HasForeignKey("Usersid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Properties");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Try.DAL.Entity.Clients", b =>
                {
                    b.Navigation("Client_Interesets");

                    b.Navigation("Client_Orders");

                    b.Navigation("Feedback");
                });

            modelBuilder.Entity("Try.DAL.Entity.Estate", b =>
                {
                    b.Navigation("Order_estate");
                });

            modelBuilder.Entity("Try.DAL.Entity.Interests", b =>
                {
                    b.Navigation("Client_Interesets");
                });

            modelBuilder.Entity("Try.DAL.Entity.Orders", b =>
                {
                    b.Navigation("Client_Orders");

                    b.Navigation("Order_estate");
                });

            modelBuilder.Entity("Try.DAL.Entity.Properties", b =>
                {
                    b.Navigation("Estate");
                });

            modelBuilder.Entity("Try.DAL.Entity.UserGroup", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Try.DAL.Entity.Users", b =>
                {
                    b.Navigation("Estate");
                });
#pragma warning restore 612, 618
        }
    }
}
